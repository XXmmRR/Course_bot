from aiogram import types
from aiogram.filters import CommandStart
from aiogram import Router
from keyboards.main.main_keyboard import get_main_menu_keyboard, get_keyboard_by_list
from filters.text_filter import Textfilter
from gspread_utils.buttons.get_main_buttons import get_main_keyboard_fields, get_column_id_by_text, \
    get_column_by_menu_second_row, get_work_buttons
from gspread_utils.text.texts import get_text
from states.menu_routing_states import FollowHandlers
from aiogram.fsm.context import FSMContext
from gspread_utils.constants import ABOUT_COMPANY_ID, FEED_BACK_ID, PARTNER_ID
from states.menu_states import FeedBackDynamicStates, PartnerDynamicStates

menu_router = Router(name='menu router')

fiedls = get_main_keyboard_fields()
company_texts = get_text(col_id=ABOUT_COMPANY_ID)
contact_texts = get_text(col_id=FEED_BACK_ID)
work_texts = get_text(col_id=PARTNER_ID)


@menu_router.message(Textfilter('–ß–∏—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç üìñ'))
async def read_text(message: types.Message, state: FSMContext):
    keyboard = get_main_menu_keyboard()
    await message.answer('–ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —Å–µ–π—á–∞—Å? ü§î', reply_markup=keyboard)
    await state.set_state(FollowHandlers.first_handler)


@menu_router.message(Textfilter('–°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æüëÄ'))
async def watch_video(message: types.Message):
    await message.answer('Not implemented')


@menu_router.message(Textfilter(fiedls[3]))
async def work(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer('–ö–µ–º —Ç—ã —Ö–æ—á–µ—à—å —Å—Ç–∞—Ç—å üöÄ', reply_markup=get_keyboard_by_list(get_work_buttons('–¢—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ üöÄ')))
    await state.set_state(FollowHandlers.work_handler)


@menu_router.message(FollowHandlers.work_handler)
async def works_questions(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    if not user_data.get('first_message'):
        await state.set_data({'first_message': message.text})
    user_data = await state.get_data()
    current_index = user_data.get('current_index', 0)  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å, –Ω–∞—á–∏–Ω–∞–µ–º —Å 0
    first_message = user_data.get('first_message')
    col_id = get_column_id_by_text(search_text=first_message)
    texts, keyboards, actions = get_text(col_id=col_id)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, —É–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    normalized_message_text = message.text.strip().lower()

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, —Ç–æ–∂–µ —É–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    normalized_keyboard_options = [option.strip().lower() for option in keyboards[current_index]]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–¥–Ω–æ–π –∏–∑ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    if normalized_message_text in normalized_keyboard_options:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–ø—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
        choice_index = normalized_keyboard_options.index(normalized_message_text)
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        action = actions[current_index][choice_index]

        if action == '–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å':
            # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–Ω–¥–µ–∫—Å –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ —Ä–∞–º–∫–∏ —Å–ø–∏—Å–∫–∞
            if current_index + 1 < len(texts):
                current_index += 1  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
            else:
                # –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –∏–ª–∏ —Ü–∏–∫–ª–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
                await message.answer("–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω—Ü–∞ –¥–∏–∞–ª–æ–≥–∞.")
        elif action == '–°–≤–æ–±–æ–¥–Ω—ã–π –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –∏ —Å–¥–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å':
            current_index += 1
            await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç', reply_markup=types.ReplyKeyboardRemove())
            await state.set_state(FollowHandlers.third_handler)
            await state.update_data(current_index=current_index)
            return
        elif action == '–í –º–µ–Ω—é':
            await read_text(message)
            await state.clear()
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(current_index=current_index)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç
        if current_index <= len(texts):
            await split_and_send_message(message, texts[current_index], reply_markup=get_keyboard_by_list(keyboards[current_index]))
    else:
        if current_index <= len(texts):
            await split_and_send_message(message, texts[current_index], reply_markup=get_keyboard_by_list(keyboards[current_index]))


@menu_router.message(FollowHandlers.first_handler)
async def handle_message(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    if not user_data.get('first_message'):
        await state.set_data({'first_message': message.text})
    user_data = await state.get_data()
    current_index = user_data.get('current_index', 0)  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å, –Ω–∞—á–∏–Ω–∞–µ–º —Å 0
    first_message = user_data.get('first_message')
    if first_message == '–¢—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ üöÄ':
        await work(message, state)
    col_id = get_column_by_menu_second_row(search_text=first_message)
    texts, keyboards, actions = get_text(col_id=col_id)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, —É–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    normalized_message_text = message.text.strip().lower()

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, —Ç–æ–∂–µ —É–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    normalized_keyboard_options = [option.strip().lower() for option in keyboards[current_index]]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–¥–Ω–æ–π –∏–∑ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    if normalized_message_text in normalized_keyboard_options:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–ø—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
        choice_index = normalized_keyboard_options.index(normalized_message_text)
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        action = actions[current_index][choice_index]

        if action == '–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å':
            # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–Ω–¥–µ–∫—Å –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ —Ä–∞–º–∫–∏ —Å–ø–∏—Å–∫–∞
            if current_index + 1 < len(texts):
                current_index += 1  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
            else:
                # –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –∏–ª–∏ —Ü–∏–∫–ª–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
                await message.answer("–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω—Ü–∞ –¥–∏–∞–ª–æ–≥–∞.")
        elif action == '–°–≤–æ–±–æ–¥–Ω—ã–π –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –∏ —Å–¥–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å':
            current_index += 1
            await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç', reply_markup=types.ReplyKeyboardRemove())
            await state.set_state(FollowHandlers.third_handler)
            await state.update_data(current_index=current_index)
            return
        elif action == '–í –º–µ–Ω—é':
            await read_text(message, state)
            await state.clear()
            return
        elif action.startswith('–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≤–µ—Ç–∫—É ='):
            first_message = action.split('=')[-1]
            user_data = await state.get_data()
            if not user_data.get('first_message'):
                await state.set_data({'first_message': first_message})
            user_data = await state.get_data()
            current_index = user_data.get('current_index', 0)  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å, –Ω–∞—á–∏–Ω–∞–µ–º —Å 0
            first_message = user_data.get('first_message')
            col_id = get_column_by_menu_second_row(search_text=first_message)
            texts, keyboards, actions = get_text(col_id=col_id)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, —É–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
            normalized_message_text = message.text.strip().lower()

            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, —Ç–æ–∂–µ —É–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
            normalized_keyboard_options = [option.strip().lower() for option in keyboards[current_index]]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–¥–Ω–æ–π –∏–∑ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            if normalized_message_text in normalized_keyboard_options:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–ø—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
                choice_index = normalized_keyboard_options.index(normalized_message_text)
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
                action = actions[current_index][choice_index]

                if action == '–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å':
                    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–Ω–¥–µ–∫—Å –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ —Ä–∞–º–∫–∏ —Å–ø–∏—Å–∫–∞
                    if current_index + 1 < len(texts):
                        current_index += 1  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
                    else:
                        # –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –∏–ª–∏ —Ü–∏–∫–ª–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
                        await message.answer("–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω—Ü–∞ –¥–∏–∞–ª–æ–≥–∞.")
                elif action == '–°–≤–æ–±–æ–¥–Ω—ã–π –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –∏ —Å–¥–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å':
                    current_index += 1
                    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç', reply_markup=types.ReplyKeyboardRemove())
                    await state.set_state(FollowHandlers.third_handler)
                    await state.update_data(current_index=current_index)
                    return
                elif action == '–í –º–µ–Ω—é':
                    await read_text(message, state)
                    await state.clear()
                    return

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                await state.update_data(current_index=current_index)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç
                if current_index <= len(texts):
                    await split_and_send_message(message, texts[current_index],
                                                 reply_markup=get_keyboard_by_list(keyboards[current_index]))
            else:
                if current_index <= len(texts):
                    await split_and_send_message(message, texts[current_index],
                                                 reply_markup=get_keyboard_by_list(keyboards[current_index]))

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(current_index=current_index)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç
        if current_index <= len(texts):
            await split_and_send_message(message, texts[current_index], reply_markup=get_keyboard_by_list(keyboards[current_index]))
    else:
        if current_index <= len(texts):
            await split_and_send_message(message, texts[current_index], reply_markup=get_keyboard_by_list(keyboards[current_index]))


async def split_and_send_message(message, text, reply_markup=None):
    # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ —Å–∏–º–≤–æ–ª—É –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    for part in text.split(r'\n'):
        if part !='\n':
            await message.answer(part, reply_markup=reply_markup)
