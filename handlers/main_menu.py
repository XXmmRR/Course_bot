from aiogram import types
from aiogram.filters import CommandStart
from aiogram import Router
from keyboards.main.main_keyboard import get_main_menu_keyboard, get_keyboard_by_list
from filters.text_filter import Textfilter
from gspread_utils.buttons.get_main_buttons import get_main_keyboard_fields
from gspread_utils.text.texts import get_text
from states.menu_routing_states import FollowHandlers
from aiogram.fsm.context import FSMContext

menu_router = Router(name='menu router')

fiedls = get_main_keyboard_fields()
company_texts = get_text()
contact_texts = get_text(col_id=5)
work_texts = get_text(col_id=7)
print(work_texts)
print(contact_texts)

@menu_router.message(Textfilter('–ß–∏—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç üìñ'))
async def read_text(message: types.Message):
    keyboard = get_main_menu_keyboard()
    await message.answer('–ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —Å–µ–π—á–∞—Å? ü§î', reply_markup=keyboard)


@menu_router.message(Textfilter('–°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æüëÄ'))
async def watch_video(message: types.Message):
    await message.answer('Not implemented')


@menu_router.message(Textfilter(fiedls[0]))
async def about_company_main(message: types.Message, state: FSMContext):
    await message.answer(company_texts[0][0], reply_markup=get_keyboard_by_list(keyboard_list=company_texts[1][0]))
    await state.clear()
    await state.set_state(FollowHandlers.first_handler)


@menu_router.message(Textfilter(fiedls[1]))
async def contacts_main(message: types.Message, state: FSMContext):
    print(contact_texts)
    await message.answer(contact_texts[0][0], reply_markup=get_keyboard_by_list(keyboard_list=contact_texts[1][0]))
    await state.clear()
    await state.set_state(FollowHandlers.second_handler)


@menu_router.message(Textfilter(fiedls[2]))
async def work_main(message: types.Message, state: FSMContext):
    await message.answer(work_texts[0][0], reply_markup=get_keyboard_by_list(work_texts[1][0]))
    await state.clear()
    await state.set_state(FollowHandlers.third_handler)


@menu_router.message(FollowHandlers.third_handler)
async def handle_message_second(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    current_index = user_data.get('current_index', 0)  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å, –Ω–∞—á–∏–Ω–∞–µ–º —Å 0

    texts, keyboards, actions = get_text(col_id=7)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    print(texts)
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, —É–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    normalized_message_text = message.text.strip().lower()

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, —Ç–æ–∂–µ —É–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    normalized_keyboard_options = [option.strip().lower() for option in keyboards[current_index]]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–¥–Ω–æ–π –∏–∑ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    if normalized_message_text in normalized_keyboard_options:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–ø—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
        choice_index = normalized_keyboard_options.index(normalized_message_text)
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        action = actions[current_index][choice_index]

        if action == '–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å' or '–°–≤–æ–±–æ–¥–Ω—ã–π –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –∏ —Å–¥–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å':
            # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–Ω–¥–µ–∫—Å –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ —Ä–∞–º–∫–∏ —Å–ø–∏—Å–∫–∞
            if current_index + 1 < len(texts):
                current_index += 1  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
            else:
                # –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –∏–ª–∏ —Ü–∏–∫–ª–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
                await message.answer("–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω—Ü–∞ –¥–∏–∞–ª–æ–≥–∞.")
        elif action == '–í –º–µ–Ω—é':
            await read_text(message)
            await state.clear()
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(current_index=current_index)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç
        if current_index <= len(texts):
            print(current_index)
            await message.answer(texts[current_index], reply_markup=get_keyboard_by_list(keyboards[current_index]))
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤.")


@menu_router.message(FollowHandlers.second_handler)
async def handle_message_second(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    current_index = user_data.get('current_index', 0)  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å, –Ω–∞—á–∏–Ω–∞–µ–º —Å 0

    texts, keyboards, actions = get_text(col_id=5)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    print(texts)
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, —É–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    normalized_message_text = message.text.strip().lower()

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, —Ç–æ–∂–µ —É–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    normalized_keyboard_options = [option.strip().lower() for option in keyboards[current_index]]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–¥–Ω–æ–π –∏–∑ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    if normalized_message_text in normalized_keyboard_options:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–ø—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
        choice_index = normalized_keyboard_options.index(normalized_message_text)
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        action = actions[current_index][choice_index]

        if action == '–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å':
            # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–Ω–¥–µ–∫—Å –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ —Ä–∞–º–∫–∏ —Å–ø–∏—Å–∫–∞
            if current_index + 1 < len(texts):
                current_index += 1  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
            else:
                # –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –∏–ª–∏ —Ü–∏–∫–ª–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
                await message.answer("–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω—Ü–∞ –¥–∏–∞–ª–æ–≥–∞.")
        elif action == '–í –º–µ–Ω—é':
            await read_text(message)
            await state.clear()
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(current_index=current_index)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç
        if current_index <= len(texts):
            print(current_index)
            await message.answer(texts[current_index], reply_markup=get_keyboard_by_list(keyboards[current_index]))
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤.")


@menu_router.message(FollowHandlers.first_handler)
async def handle_message(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    current_index = user_data.get('current_index', 0)  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å, –Ω–∞—á–∏–Ω–∞–µ–º —Å 0

    texts, keyboards, actions = get_text()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, —É–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    normalized_message_text = message.text.strip().lower()

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, —Ç–æ–∂–µ —É–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    normalized_keyboard_options = [option.strip().lower() for option in keyboards[current_index]]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–¥–Ω–æ–π –∏–∑ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    if normalized_message_text in normalized_keyboard_options:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–ø—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
        choice_index = normalized_keyboard_options.index(normalized_message_text)
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        action = actions[current_index][choice_index]

        if action == '–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å':
            # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–Ω–¥–µ–∫—Å –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ —Ä–∞–º–∫–∏ —Å–ø–∏—Å–∫–∞
            if current_index + 1 < len(texts):
                current_index += 1  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
            else:
                # –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –∏–ª–∏ —Ü–∏–∫–ª–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
                await message.answer("–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω—Ü–∞ –¥–∏–∞–ª–æ–≥–∞.")
        elif action == '–í –º–µ–Ω—é':
            await read_text(message)
            await state.clear()
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(current_index=current_index)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç
        if current_index < len(texts):
            await message.answer(texts[current_index], reply_markup=get_keyboard_by_list(keyboards[current_index]))
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤.")